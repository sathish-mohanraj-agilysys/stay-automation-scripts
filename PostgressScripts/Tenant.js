tenantId = "264101";
var db = db.getSiblingDB('rGuestStay-aks-stay-qa');
var collectionNames = ["accountDisplaySettings","accountHistories","accountingDate","accounts","allocationEventStream","allocations","announcementCategories","announcements","anonymizeEvents","appCuesConfig","arDeposit","authorizationHistory","autoCollectDeposit","autoNightAudit","autoRecurringChargeRules","batchDistributions","batchRooms","bookingChannelEventStream","bookingChannels","businessContext","casinoPointIssuanceSettings","casinoTier","comments","commissionEventStream","commissions","compAccountingMappings","compAuthorizers","compDepartments","compOfferDetails","compOfferDetailsResponseDomain","compOffers","componentBundles","compReverseRedemptionResponseDomain","condoOwners","condoRooms","consentPolicyMappings","contents","copyReservationsJobs","couponSettings","creditCardAuthRuleSettings","customFields","customizableDashBoard","dailyUserOperations","dataRetentionPolicyDetails","departmentDetails","documentDetails","emailPrintTracking","events","eventTypes","failedAuth","featureToggles","fiscalYear","gdprCommits","giftCardSettings","groups","guestConsentPolicyDetails","guestMessage","guestMessageEventStream","guestSatisfactionCategories","guestSatisfactionEntries","guestSatisfactionSettings","guestServiceRequests","guestServiceRequestsCounter","guestStayHistory","housekeepingServiceRequests","importEntries","importEntryFileDomain","importExport","InventoryItemAllocation","invoiceEventStream","invoices","lastRoomValues","ledgerBalancesUpdates","ledgerSettings","ledgerTransactions","ledgerTransactionsFlags","LedgerTransactionUpdates","linkedProfileRetentionDetails","linkedReservation","lostAndFoundEventStream","lostAndFoundItems","lostAndFoundSettings","lostBusinessTracking","loyaltyHKPatterns","maintenanceServiceRequests","maintenanceServiceRequestsCounter","MaintenanceStaffMember","nextAccountNumbers","offlineAuthInformation","otaManualSyncStatus","otaMetrics","otaReSyncStatus","payAgentEvents","payAgentTransactionEventStream","payAgentTransactions","paymentGatewaySettings","paymentInstrument","paymentInstrumentReference","planAttributes","PosPmsItems","PosPmsItemsDataPorter","postPaymentResponse","preferenceCategories","preferences","profileAnonymizeEntities","profileEventStream","profileOptions","profiles","profileSettings","propertyRates","propertyRateYield","propertySettings","rateAllocationGroup","rateAllocationGroupDetails","rateOverrides","recurringCharge","relayDeviceMapping","relayMessages","reportGroups","reports","reservationBookingNotice","reservationDailySnapshot","reservationEventStream","reservationInternal","roomMoveReasons","rooms","roomTypeChangeTracker","roomTypeConversionDetails","routingRuleTemplates","ScheduledDepositDueSnapshot","schedules","servicePatternInternal","serviceRequests","smsSettings","StaffMember","startupKey","statementHistories","taskDetails","taxGroups","taxSummaryConfig","tenantData","tenantDefaultSettings","tokens","transactionItemMutex","userEventStream","vehicleDetails","vehicleTypes","verifiedIdentities","verifiedIdentitiesEventStream","waitlistInquiries","waitlistInquiryConfig","accountReference","arDefaults","autoSettlementRule","batchStatus","creditTerms","digitalCheckIn","FieldNameCustomization","fieldSettings","FolioCustomizationSettings","groupReportFavouritesExecution","multipleReservationResponseDomain","otaTransactionRevisions","ownerTypeCategorization","PlayerRetailRatingDetails","postingRuleStatus","queueRoomDashboardDomain","queueRoomPriorityLookUpDomain","queueRoomSettings","rateCalendar","rateChangeHistory","rateFactor","ratePlan","ratesConfig","rateStrategy","reportFavourites","reportFavouritesGenerationInfo","reportFavouritesGroup","reservationHousekeepingHistory","resourceAssignmentPlans","roomUpgradeConfig","settlementHistories","transportInfo","travelLocation","travelType","unappliedPaymentHistories","UpdatedRoomStatusesResponse","appliance","binSettings","documentTypes","earlyCheckInLateCheckoutFees","earlyCheckoutFees","GroupSharedReservation","folioInvoices","httpCache","losHKPattern","sharedReservations","pmsProperties","otaOutboundEntity"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "tenantId": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["accountBalances","accountDaterollStatus","accountingItems","accountRecurringChargesStatus","adHocScheduledUserDetails","autoNightAuditErrors","autoRecurringChargeStatus","corruptedEntities","createInvoiceStatus","dateRoll","featureToggleMutex","homepagePreference","invoiceNumbers","invoiceReportStatus","ledgerBalancesUpdateMutex","pantryItems","roomTypeConversion","timedEntities","batchDistributorMutex","groupMutex","guestHistoryMutex","inventoryItemMutex","otaOutboundReSyncMutex","QueueRoomMutex","QueueRoomPublisherMutex"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "_id.tenantId": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["houseKeepingServiceRequestEventStream"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "events.tenantId": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["guestServiceRequestEventStream"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "events.dataObject._id.tenantId": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["invoiceReportResult"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "invoice.tenantId": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["config"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "path": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["configEvents"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "events.path": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["adHocReportAudit"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "ti": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})
var collectionNames = ["auditEntities"];
collectionNames.forEach(function(collname) {
print(collname+" : " + db[collname].updateMany({ "_id.ti": tenantId },{$set:{"notWrittenInWarehouse": ISODate("2000-01-01T00:00:00.000Z")}}).matchedCount);})